{"version":3,"sources":["../../../../src/plugins/migration/data-migrator.ts"],"names":["Subject","deepEqual","clone","toPromise","flatClone","getHeightOfRevision","createRevision","PROMISE_RESOLVE_VOID","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_NULL","createRxSchema","newRxError","runAsyncPluginHooks","runPluginHooks","getPreviousVersions","createCrypter","getMigrationStateByDatabase","map","countAllUndeleted","getBatch","getSingleDocument","_handleFromStorageInstance","_handleToStorageInstance","IdleQueue","DataMigrator","newestCollection","migrationStrategies","_migrated","nonMigratedOldCollections","allOldCollections","currentSchema","schema","database","name","migrate","batchSize","state","done","total","handled","success","deleted","percent","stateSubject","allSubject","allList","getValue","slice","push","asObservable","next","_getOldCollections","then","ret","countAll","Promise","all","oldCol","storageInstance","totalCount","reduce","cur","prev","collection","currentCol","shift","currentPromise","migrationState$","migrateOldCollection","res","sub","subscribe","subState","type","Math","round","e","unsubscribe","forEach","c","close","error","complete","pipe","withCollection","migratePromise","_migratePromise","mustMigrate","must","rej","state$","err","createOldCollection","version","schemaObj","dataMigrator","primaryKey","Object","keys","properties","filter","key","primary","storageInstanceCreationParams","databaseName","collectionName","idleQueue","options","instanceCreationOptions","storage","createStorageInstance","_crypter","password","getOldCollectionDocs","jsonSchema","v","internalStore","fun","oldCollectionDocs","d","oldColDocs","colDoc","length","runStrategyIfNotNull","oldCollection","docOrNull","retPromise","getBatchOfOldCollection","docs","doc","migrateDocumentData","docData","attachmentsBefore","_attachments","mutateableDocData","nextVersion","resolve","validate","asRxError","fromVersion","toVersion","originalDoc","finalDoc","errors","parameters","isDocumentDataWithoutRevisionEqual","doc1","doc2","doc1NoRev","assign","undefined","_rev","doc2NoRev","_migrateDocuments","documentsData","migratedDocuments","bulkWriteToStorageInput","actions","idx","migratedDocData","action","migrated","newHeight","newRevision","saveData","bulkAddRevisions","bulkDeleteInputData","writeDeleted","_deleted","previous","document","bulkWrite","deleteOldCollection","remove","removeCollectionDoc","_migrate","observer","allBatchesDone","handleOneBatch","batch"],"mappings":"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","sourcesContent":["/**\n * The DataMigrator handles the documents from collections with older schemas\n * and transforms/saves them into the newest collection\n */\n/**\n * TODO this should be completely rewritten because:\n * - The current implemetation does not use bulkDocs which is much faster\n * - This could have been done in much less code which would be easier to uderstand\n *\n */\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport deepEqual from 'fast-deep-equal';\nimport {\n    clone,\n    toPromise,\n    flatClone,\n    getHeightOfRevision,\n    createRevision,\n    PROMISE_RESOLVE_VOID,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_NULL,\n    ensureNotFalsy\n} from '../../util';\nimport {\n    createRxSchema\n} from '../../rx-schema';\nimport {\n    RxError,\n    newRxError\n} from '../../rx-error';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from '../../hooks';\nimport type {\n    RxCollection,\n    RxDatabase,\n    MigrationState,\n    NumberFunctionMap,\n    OldRxCollection,\n    WithAttachmentsData,\n    RxJsonSchema,\n    RxDocumentData\n} from '../../types';\nimport {\n    RxSchema,\n    getPreviousVersions\n} from '../../rx-schema';\nimport {\n    createCrypter\n} from '../../crypter';\nimport {\n    getMigrationStateByDatabase,\n    MigrationStateWithCollection\n} from './migration-state';\nimport { map } from 'rxjs/operators';\nimport {\n    countAllUndeleted,\n    getBatch,\n    getSingleDocument\n} from '../../rx-storage-helper';\nimport { InternalStoreDocumentData } from '../../rx-database';\nimport {\n    _handleFromStorageInstance,\n    _handleToStorageInstance\n} from '../../rx-collection-helper';\nimport { IdleQueue } from 'custom-idle-queue';\n\nexport class DataMigrator {\n\n    constructor(\n        public newestCollection: RxCollection,\n        public migrationStrategies: NumberFunctionMap\n    ) {\n        this.currentSchema = newestCollection.schema;\n        this.database = newestCollection.database;\n        this.name = newestCollection.name;\n    }\n\n    public currentSchema: RxSchema;\n    public database: RxDatabase;\n    public name: string;\n\n\n    private _migrated: boolean = false;\n    private _migratePromise?: Promise<any>;\n    private nonMigratedOldCollections: OldRxCollection[] = [];\n    private allOldCollections: OldRxCollection[] = [];\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        if (this._migrated) {\n            throw newRxError('DM1');\n        }\n        this._migrated = true;\n\n        const state = {\n            done: false, // true if finished\n            total: 0, // will be the doc-count\n            handled: 0, // amount of handled docs\n            success: 0, // handled docs which successed\n            deleted: 0, // handled docs which got deleted\n            percent: 0 // percentage\n        };\n\n        const stateSubject: Subject<MigrationStateWithCollection> = new Subject();\n\n        /**\n         * Add to output of RxDatabase.migrationStates\n         */\n        const allSubject = getMigrationStateByDatabase(this.newestCollection.database);\n        const allList = allSubject.getValue().slice(0);\n        allList.push(stateSubject.asObservable());\n        allSubject.next(allList);\n\n        /**\n         * TODO this is a side-effect which might throw\n         * We did this because it is not possible to create new Observer(async(...))\n         * @link https://github.com/ReactiveX/rxjs/issues/4074\n         * In the future the whole migration plugin should be rewritten without rxjs\n         * so we do not have this problem.\n         */\n        (() => {\n            return _getOldCollections(this)\n                .then(ret => {\n                    this.nonMigratedOldCollections = ret;\n                    this.allOldCollections = this.nonMigratedOldCollections.slice(0);\n                    const countAll: Promise<number[]> = Promise.all(\n                        this.nonMigratedOldCollections.map(oldCol => countAllUndeleted(oldCol.storageInstance))\n                    );\n                    return countAll;\n                })\n                .then(countAll => {\n                    const totalCount: number = countAll\n                        .reduce((cur, prev) => prev = cur + prev, 0);\n                    state.total = totalCount;\n                    stateSubject.next({\n                        collection: this.newestCollection,\n                        state: flatClone(state)\n                    });\n                    let currentCol = this.nonMigratedOldCollections.shift();\n                    let currentPromise = PROMISE_RESOLVE_VOID;\n                    while (currentCol) {\n                        const migrationState$ = migrateOldCollection(\n                            currentCol,\n                            batchSize\n                        );\n                        currentPromise = currentPromise.then(() => {\n                            return new Promise(res => {\n                                const sub = migrationState$.subscribe(\n                                    (subState: any) => {\n                                        state.handled++;\n                                        (state as any)[subState.type] = (state as any)[subState.type] + 1;\n                                        state.percent = Math.round(state.handled / state.total * 100);\n                                        stateSubject.next({\n                                            collection: this.newestCollection,\n                                            state: flatClone(state)\n                                        });\n                                    },\n                                    (e: any) => {\n                                        sub.unsubscribe();\n                                        this.allOldCollections.forEach(c => c.storageInstance.close());\n                                        stateSubject.error(e);\n                                    }, () => {\n                                        if (currentCol) {\n                                            currentCol.storageInstance.close();\n                                        }\n                                        sub.unsubscribe();\n                                        res();\n                                    });\n                            });\n                        });\n                        currentCol = this.nonMigratedOldCollections.shift();\n                    }\n                    return currentPromise;\n                })\n                .then(() => {\n                    state.done = true;\n                    state.percent = 100;\n                    stateSubject.next({\n                        collection: this.newestCollection,\n                        state: flatClone(state)\n                    });\n                    stateSubject.complete();\n                });\n        })();\n\n\n        return stateSubject.pipe(\n            map(withCollection => withCollection.state)\n        );\n    }\n\n    migratePromise(batchSize: number): Promise<any> {\n        if (!this._migratePromise) {\n            this._migratePromise = mustMigrate(this)\n                .then(must => {\n                    if (!must) {\n                        return PROMISE_RESOLVE_FALSE;\n                    } else {\n                        return new Promise((res, rej) => {\n                            const state$ = this.migrate(batchSize);\n                            (state$ as any).subscribe(null, rej, res);\n                            this.allOldCollections.forEach(c => c.storageInstance.close());\n                        })\n                            .catch(err => {\n                                this.allOldCollections.forEach(c => c.storageInstance.close());\n                                throw err;\n                            });\n                    }\n                });\n        }\n        return this._migratePromise;\n    }\n}\n\nexport async function createOldCollection(\n    version: number,\n    schemaObj: RxJsonSchema<any>,\n    dataMigrator: DataMigrator\n): Promise<OldRxCollection> {\n    const database = dataMigrator.newestCollection.database;\n    // try to fill primaryKey when migrating from database created by RxDB 9 and lower to the latest\n    if (typeof schemaObj.primaryKey === 'undefined') {\n        schemaObj.primaryKey = Object.keys(schemaObj.properties)\n            .filter(key => (schemaObj as any).properties[key].primary)\n            .shift() as any;\n    }\n    const schema = createRxSchema(schemaObj, false);\n\n    const storageInstanceCreationParams = {\n        databaseName: database.name,\n        collectionName: dataMigrator.newestCollection.name,\n        schema: schemaObj,\n        idleQueue: new IdleQueue(),\n        options: dataMigrator.newestCollection.instanceCreationOptions\n    };\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    const storageInstance = await database.storage.createStorageInstance(\n        storageInstanceCreationParams\n    );\n    const ret: OldRxCollection = {\n        version,\n        dataMigrator,\n        newestCollection: dataMigrator.newestCollection,\n        database,\n        schema: createRxSchema(schemaObj, false),\n        storageInstance,\n        _crypter: createCrypter(\n            database.password,\n            schema\n        )\n    };\n\n    return ret;\n}\n\n\nexport async function getOldCollectionDocs(\n    dataMigrator: DataMigrator\n): Promise<RxDocumentData<InternalStoreDocumentData>[]> {\n    return Promise.all(\n        getPreviousVersions(dataMigrator.currentSchema.jsonSchema)\n            .map(v => getSingleDocument<InternalStoreDocumentData>(dataMigrator.database.internalStore, dataMigrator.name + '-' + v))\n            .map(fun => fun.catch(() => null)) // auto-catch so Promise.all continues\n    )\n        .then(oldCollectionDocs => (oldCollectionDocs as any).filter((d: any) => !!d));\n}\n\n/**\n * get an array with OldCollection-instances from all existing old storage-instances\n */\nexport async function _getOldCollections(\n    dataMigrator: DataMigrator\n): Promise<OldRxCollection[]> {\n    const oldColDocs = await getOldCollectionDocs(dataMigrator);\n\n    return Promise.all(\n        oldColDocs\n            .map(colDoc => {\n                if (!colDoc) {\n                    return null as any;\n                }\n                return createOldCollection(\n                    colDoc.schema.version,\n                    colDoc.schema,\n                    dataMigrator\n                );\n            })\n            .filter(colDoc => colDoc !== null)\n    );\n}\n\n\n/**\n * returns true if a migration is needed\n */\nexport function mustMigrate(dataMigrator: DataMigrator): Promise<boolean> {\n    if (dataMigrator.currentSchema.version === 0) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n    return getOldCollectionDocs(dataMigrator)\n        .then(oldColDocs => {\n            if (oldColDocs.length === 0) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n}\n\nexport function runStrategyIfNotNull(\n    oldCollection: OldRxCollection,\n    version: number,\n    docOrNull: any | null\n): Promise<any | null> {\n    if (docOrNull === null) {\n        return PROMISE_RESOLVE_NULL;\n    } else {\n        const ret = oldCollection.dataMigrator.migrationStrategies[version](docOrNull, oldCollection);\n        const retPromise = toPromise(ret);\n        return retPromise;\n    }\n}\n\nexport function getBatchOfOldCollection(\n    oldCollection: OldRxCollection,\n    batchSize: number\n): Promise<any[]> {\n    return getBatch(\n        oldCollection.storageInstance,\n        batchSize\n    )\n        .then(docs => docs\n            .map(doc => {\n                doc = flatClone(doc);\n                doc = _handleFromStorageInstance(oldCollection as any, doc);\n                return doc;\n            })\n        );\n}\n\n/**\n * runs the doc-data through all following migrationStrategies\n * so it will match the newest schema.\n * @throws Error if final doc does not match final schema or migrationStrategy crashes\n * @return final object or null if migrationStrategy deleted it\n */\nexport function migrateDocumentData(\n    oldCollection: OldRxCollection,\n    docData: any\n): Promise<any | null> {\n    /**\n     * We cannot deep-clone Blob or Buffer\n     * so we just flat clone it here\n     * and attach it to the deep cloned document data.\n     */\n    const attachmentsBefore = flatClone(docData._attachments);\n    const mutateableDocData = clone(docData);\n    mutateableDocData._attachments = attachmentsBefore;\n\n    let nextVersion = oldCollection.version + 1;\n\n    // run the document throught migrationStrategies\n    let currentPromise = Promise.resolve(mutateableDocData);\n    while (nextVersion <= oldCollection.newestCollection.schema.version) {\n        const version = nextVersion;\n        currentPromise = currentPromise.then(docOrNull => runStrategyIfNotNull(\n            oldCollection,\n            version,\n            docOrNull\n        ));\n        nextVersion++;\n    }\n\n    return currentPromise.then(doc => {\n        if (doc === null) {\n            return PROMISE_RESOLVE_NULL;\n        }\n\n        // check final schema\n        try {\n            oldCollection.newestCollection.schema.validate(doc);\n        } catch (err) {\n            const asRxError: RxError = err as any;\n            throw newRxError('DM2', {\n                fromVersion: oldCollection.version,\n                toVersion: oldCollection.newestCollection.schema.version,\n                originalDoc: docData,\n                finalDoc: doc,\n                /**\n                 * pass down data from parent error,\n                 * to make it better understandable what did not work\n                 */\n                errors: asRxError.parameters.errors,\n                schema: asRxError.parameters.schema\n            });\n        }\n        return doc;\n    });\n}\n\n\nexport function isDocumentDataWithoutRevisionEqual<T>(doc1: T, doc2: T): boolean {\n    const doc1NoRev = Object.assign({}, doc1, {\n        _attachments: undefined,\n        _rev: undefined\n    });\n    const doc2NoRev = Object.assign({}, doc2, {\n        _attachments: undefined,\n        _rev: undefined\n    });\n    return deepEqual(doc1NoRev, doc2NoRev);\n}\n\n/**\n * transform documents data and save them to the new collection\n * @return status-action with status and migrated document\n */\nexport async function _migrateDocuments(\n    oldCollection: OldRxCollection,\n    documentsData: any[]\n): Promise<{ type: string, doc: any }[]> {\n\n    // run hooks that might mutate documentsData\n    await Promise.all(\n        documentsData.map(docData => runAsyncPluginHooks(\n            'preMigrateDocument',\n            {\n                docData,\n                oldCollection\n            }\n        ))\n    );\n    // run the migration strategies on each document\n    const migratedDocuments: (any | null)[] = await Promise.all(\n        documentsData.map(docData => migrateDocumentData(oldCollection, docData))\n    );\n\n\n    const bulkWriteToStorageInput: any[] = [];\n    const actions: any[] = [];\n\n    documentsData.forEach((docData, idx) => {\n        const migratedDocData: any | null = migratedDocuments[idx];\n        const action = {\n            res: null as any,\n            type: '',\n            migrated: migratedDocData,\n            doc: docData,\n            oldCollection,\n            newestCollection: oldCollection.newestCollection\n        };\n        actions.push(action);\n\n        /**\n         * Determiniticly handle the revision\n         * so migrating the same data on multiple instances\n         * will result in the same output.\n         */\n        if (isDocumentDataWithoutRevisionEqual(docData, migratedDocData)) {\n            /**\n             * Data not changed by migration strategies, keep the same revision.\n             * This ensures that other replicated instances that did not migrate already\n             * will still have the same document.\n             */\n            migratedDocData._rev = docData._rev;\n        } else if (migratedDocData !== null) {\n            /**\n             * data changed, increase revision height\n             * so replicating instances use our new document data\n             */\n            const newHeight = getHeightOfRevision(docData._rev) + 1;\n            const newRevision = newHeight + '-' + createRevision(migratedDocData);\n            migratedDocData._rev = newRevision;\n        }\n\n\n        if (migratedDocData) {\n            /**\n             * save to newest collection\n             * notice that this data also contains the attachments data\n             */\n            const attachmentsBefore = migratedDocData._attachments;\n            const saveData: WithAttachmentsData<any> = _handleToStorageInstance(oldCollection.newestCollection, migratedDocData);\n            saveData._attachments = attachmentsBefore;\n            bulkWriteToStorageInput.push(saveData);\n            action.res = saveData;\n            action.type = 'success';\n        } else {\n            /**\n             * Migration strategy returned null\n             * which means we should not migrate this document,\n             * just drop it.\n             */\n            action.type = 'deleted';\n        }\n    });\n\n\n    /**\n     * Write the documents to the newest collection.\n     * We need to add as revision\n     * because we provide the _rev by our own\n     * to have deterministic revisions in case the migration\n     * runs on multiple nodes which must lead to the equal storage state.\n     */\n    if (bulkWriteToStorageInput.length) {\n        await oldCollection.newestCollection.storageInstance.bulkAddRevisions(bulkWriteToStorageInput);\n    }\n\n    // run hooks\n    await Promise.all(\n        actions.map(action => runAsyncPluginHooks(\n            'postMigrateDocument',\n            action\n        ))\n    );\n\n    // remove the documents from the old collection storage instance\n    const bulkDeleteInputData = documentsData.map(docData => {\n        const writeDeleted = flatClone(docData);\n        writeDeleted._deleted = true;\n        return {\n            previous: _handleToStorageInstance(oldCollection as any, docData),\n            document: _handleToStorageInstance(oldCollection as any, writeDeleted)\n        };\n    });\n\n    if (bulkDeleteInputData.length) {\n        await oldCollection.storageInstance.bulkWrite(bulkDeleteInputData);\n    }\n\n    return actions;\n}\n\n\n/**\n * deletes this.storageInstance and removes it from the database.collectionsCollection\n */\nexport function deleteOldCollection(\n    oldCollection: OldRxCollection\n): Promise<void> {\n    return oldCollection.storageInstance.remove()\n        .then(\n            () => oldCollection.database.removeCollectionDoc(\n                oldCollection.dataMigrator.name,\n                oldCollection.schema\n            )\n        );\n}\n\n/**\n * runs the migration on all documents and deletes the storage instance afterwards\n */\nexport function migrateOldCollection(\n    oldCollection: OldRxCollection,\n    batchSize = 10\n): Observable<any> {\n    if (oldCollection._migrate) {\n        // already running\n        throw newRxError('DM3');\n    }\n    oldCollection._migrate = true;\n\n    const observer = new Subject();\n\n    /**\n     * TODO this is a side-effect which might throw\n     * @see DataMigrator.migrate()\n     */\n    (() => {\n        let error: any;\n        const allBatchesDone = () => {\n            // remove this oldCollection\n            return deleteOldCollection(oldCollection)\n                .then(() => observer.complete());\n        };\n        const handleOneBatch = () => {\n            return getBatchOfOldCollection(oldCollection, batchSize)\n                .then(batch => {\n                    if (batch.length === 0) {\n                        allBatchesDone();\n                        return false;\n                    } else {\n                        return _migrateDocuments(oldCollection, batch)\n                            .then((actions: any[]) => actions.forEach(action => observer.next(action)))\n                            .catch(e => error = e)\n                            .then(() => true);\n                    }\n                })\n                .then(next => {\n                    if (!next) {\n                        return;\n                    }\n                    if (error) {\n                        observer.error(error);\n                    } else {\n                        handleOneBatch();\n                    }\n                });\n        };\n        handleOneBatch();\n    })();\n\n    return observer.asObservable();\n}\n\nexport function migratePromise(\n    oldCollection: OldRxCollection,\n    batchSize?: number\n): Promise<any> {\n    if (!oldCollection._migratePromise) {\n        oldCollection._migratePromise = new Promise((res, rej) => {\n            const state$ = migrateOldCollection(oldCollection, batchSize);\n            (state$ as any).subscribe(null, rej, res);\n        });\n    }\n    return oldCollection._migratePromise;\n}\n"],"file":"data-migrator.js"}