{"version":3,"sources":["../../../../src/plugins/lokijs/lokijs-helper.ts"],"names":["lokijs","add","unloadAdd","flatClone","LokiSaveQueue","CHANGES_COLLECTION_SUFFIX","LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE","LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE","stripLokiKey","docData","$loki","cloned","getLokiEventKey","isLocal","primary","revision","prefix","eventKey","OPEN_LOKIJS_STORAGE_INSTANCES","Set","LOKIJS_COLLECTION_DEFAULT_OPTIONS","disableChangesApi","disableMeta","disableDeltaChangesApi","disableFreeze","cloneMethod","clone","transactional","autoupdate","LOKI_DATABASE_STATE_BY_NAME","Map","getLokiDatabase","databaseName","databaseSettings","rxDatabaseIdleQueue","databaseState","get","hasPersistence","adapter","persistenceMethod","useSettings","Object","assign","autoload","verbose","autosave","throttledSaves","database","saveQueue","runningSavesIdleQueue","wrapCall","Promise","res","rej","loadDatabase","err","autoloadCallback","unloads","push","run","state","collections","set","closeLokiCollections","forEach","collection","collectionName","name","keys","length","u","remove","close"],"mappings":"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","sourcesContent":["import type { RxStorageInstanceLoki } from './rx-storage-instance-loki';\nimport type { RxStorageKeyObjectInstanceLoki } from './rx-storage-key-object-instance-loki';\nimport lokijs, { Collection } from 'lokijs';\nimport type {\n    LokiDatabaseSettings,\n    LokiDatabaseState,\n    LokiLocalDatabaseState\n} from '../../types';\nimport {\n    add as unloadAdd, AddReturn\n} from 'unload';\nimport { flatClone } from '../../util';\nimport { LokiSaveQueue } from './loki-save-queue';\nimport type { IdleQueue } from 'custom-idle-queue';\n\nexport const CHANGES_COLLECTION_SUFFIX = '-rxdb-changes';\nexport const LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request';\nexport const LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request-key-object';\n\n\n/**\n * Loki attaches a $loki property to all data\n * which must be removed before returning the data back to RxDB.\n */\nexport function stripLokiKey<T>(docData: T & { $loki?: number }): T {\n    if (!docData.$loki) {\n        return docData;\n    }\n    const cloned = flatClone(docData);\n    delete cloned.$loki;\n    return cloned;\n}\n\nexport function getLokiEventKey(\n    isLocal: boolean,\n    primary: string,\n    revision: string\n): string {\n    const prefix = isLocal ? 'local' : 'non-local';\n    const eventKey = prefix + '|' + primary + '|' + revision;\n    return eventKey;\n}\n\n/**\n * Used to check in tests if all instances have been cleaned up.\n */\nexport const OPEN_LOKIJS_STORAGE_INSTANCES: Set<RxStorageKeyObjectInstanceLoki | RxStorageInstanceLoki<any>> = new Set();\n\n\nexport const LOKIJS_COLLECTION_DEFAULT_OPTIONS: Partial<CollectionOptions<any>> = {\n    disableChangesApi: true,\n    disableMeta: true,\n    disableDeltaChangesApi: true,\n    disableFreeze: true,\n    // TODO use 'immutable' like WatermelonDB does it\n    cloneMethod: 'shallow-assign',\n    clone: false,\n    transactional: false,\n    autoupdate: false\n}\n\nconst LOKI_DATABASE_STATE_BY_NAME: Map<string, Promise<LokiDatabaseState>> = new Map();\nexport function getLokiDatabase(\n    databaseName: string,\n    databaseSettings: LokiDatabaseSettings,\n    rxDatabaseIdleQueue: IdleQueue\n): Promise<LokiDatabaseState> {\n    let databaseState: Promise<LokiDatabaseState> | undefined = LOKI_DATABASE_STATE_BY_NAME.get(databaseName);\n    if (!databaseState) {\n        /**\n         * We assume that as soon as an adapter is passed,\n         * the database has to be persistend.\n         */\n        const hasPersistence: boolean = !!databaseSettings.adapter;\n        databaseState = (async () => {\n\n            let persistenceMethod = hasPersistence ? 'adapter' : 'memory';\n            if (databaseSettings.persistenceMethod) {\n                persistenceMethod = databaseSettings.persistenceMethod;\n            }\n            const useSettings = Object.assign(\n                // defaults\n                {\n                    autoload: hasPersistence,\n                    persistenceMethod,\n                    verbose: true\n                },\n                databaseSettings,\n                // overwrites\n                {\n                    /**\n                     * RxDB uses its custom load and save handling\n                     * so we disable the LokiJS save/load handlers.\n                     */\n                    autoload: false,\n                    autosave: false,\n                    throttledSaves: false\n                }\n            );\n            const database = new lokijs(\n                databaseName + '.db',\n                flatClone(useSettings)\n            );\n            const saveQueue = new LokiSaveQueue(\n                database,\n                useSettings,\n                rxDatabaseIdleQueue\n            );\n\n            /**\n             * Wait until all data is loaded from persistence adapter.\n             * Wrap the loading into the saveQueue to ensure that when many\n             * collections are created a the same time, the load-calls do not interfer\n             * with each other and cause error logs.\n             */\n            if (hasPersistence) {\n                await saveQueue.runningSavesIdleQueue.wrapCall(\n                    () => new Promise<void>((res, rej) => {\n                        database.loadDatabase({}, (err) => {\n                            if (useSettings.autoloadCallback) {\n                                useSettings.autoloadCallback(err);\n                            }\n                            err ? rej(err) : res();\n                        });\n                    })\n                );\n            }\n\n            /**\n             * Autosave database on process end\n             */\n            const unloads: AddReturn[] = [];\n            if (hasPersistence) {\n                unloads.push(\n                    unloadAdd(() => saveQueue.run())\n                );\n            }\n\n            const state: LokiDatabaseState = {\n                database,\n                databaseSettings: useSettings,\n                saveQueue,\n                collections: {},\n                unloads\n            };\n\n            return state;\n        })();\n        LOKI_DATABASE_STATE_BY_NAME.set(databaseName, databaseState);\n    }\n    return databaseState;\n}\n\nexport async function closeLokiCollections(\n    databaseName: string,\n    collections: Collection[]\n) {\n    const databaseState = await LOKI_DATABASE_STATE_BY_NAME.get(databaseName);\n    if (!databaseState) {\n        // already closed\n        return;\n    }\n    await databaseState.saveQueue.run();\n    collections.forEach(collection => {\n        const collectionName = collection.name;\n        delete databaseState.collections[collectionName];\n    });\n    if (Object.keys(databaseState.collections).length === 0) {\n        // all collections closed -> also close database\n        LOKI_DATABASE_STATE_BY_NAME.delete(databaseName);\n        databaseState.unloads.forEach(u => u.remove());\n        await new Promise<void>((res, rej) => {\n            databaseState.database.close(err => {\n                err ? rej(err) : res();\n            });\n        });\n    }\n}\n"],"file":"lokijs-helper.js"}