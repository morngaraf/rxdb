{"version":3,"sources":["../../../../src/plugins/lokijs/loki-save-queue.ts"],"names":["LokiSaveQueue","lokiDatabase","databaseSettings","rxDatabaseIdleQueue","writesSinceLastRun","runningSavesIdleQueue","IdleQueue","addWrite","run","adapter","t","requestIdlePromise","Promise","all","isIdle","writeAmount","then","wrapCall","res","rej","saveDatabase","err","autosaveCallback"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;IACaA,a;AAIT,yBACoBC,YADpB,EAEoBC,gBAFpB,EAGoBC,mBAHpB,EAIE;AAAA,SAPKC,kBAOL,GAPkC,CAOlC;AAAA,SANcC,qBAMd,GANiD,IAAIC,0BAAJ,CAAc,CAAd,CAMjD;AAAA,SAHkBL,YAGlB,GAHkBA,YAGlB;AAAA,SAFkBC,gBAElB,GAFkBA,gBAElB;AAAA,SADkBC,mBAClB,GADkBA,mBAClB;AAED;;;;SAEMI,Q,GAAP,oBAAkB;AACd,SAAKH,kBAAL,GAA0B,KAAKA,kBAAL,GAA0B,CAApD;AACA,SAAKI,GAAL;AACH,G;;SAEYA,G;6FAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACS,KAAKN,gBAAL,CAAsBO,OAD/B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAIUC,cAAAA,CAJV,GAIc,gBAJd;;AAAA,oBAKQ,KAAKN,kBAAL,KAA4B,CALpC;AAAA;AAAA;AAAA;;AAAA,+CAMe,KAAKC,qBAAL,CAA2BM,kBAA3B,EANf;;AAAA;AAAA;AAAA,qBASUC,OAAO,CAACC,GAAR,CAAY,CACd,+BADc,EAEd,uBAAY,GAAZ,CAFc,CAAZ,CATV;;AAAA;AAAA,oBAcQ,CACI,CAAC,KAAKV,mBAAL,CAAyBW,MAAzB,EAAD,IACA,CAAC,KAAKT,qBAAL,CAA2BS,MAA3B,EAFL,KAGK,KAAKV,kBAAL,KAA4B,CAjBzC;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAmBc,+BAnBd;;AAAA;AAAA;AAAA,qBAoBcQ,OAAO,CAACC,GAAR,CAAY,CACd,KAAKV,mBAAL,CAAyBQ,kBAAzB,EADc,EAEd,KAAKN,qBAAL,CAA2BM,kBAA3B,EAFc,EAGd,uBAAY,GAAZ,CAHc,CAAZ,CApBd;;AAAA;AAAA;AAAA;;AAAA;AAAA,oBA2BQ,KAAKP,kBAAL,KAA4B,CA3BpC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA8BUW,cAAAA,WA9BV,GA8BwB,KAAKX,kBA9B7B;AA+BI,mBAAKA,kBAAL,GAA0B,CAA1B;AA/BJ,+CAiCW,KAAKC,qBAAL,CAA2BM,kBAA3B,GAAgDK,IAAhD,CAAqD,YAAM;AAC9D,uBAAO,KAAI,CAACX,qBAAL,CAA2BY,QAA3B,CACH,YAAM;AACF,yBAAO,IAAIL,OAAJ,CAAkB,UAACM,GAAD,EAAMC,GAAN,EAAc;AACnC,oBAAA,KAAI,CAAClB,YAAL,CAAkBmB,YAAlB,CAA+B,UAAAC,GAAG,EAAI;AAClC,0BAAIA,GAAJ,EAAS;AACL,wBAAA,KAAI,CAACjB,kBAAL,GAA0B,KAAI,CAACA,kBAAL,GAA0BW,WAApD;AACAI,wBAAAA,GAAG,CAACE,GAAD,CAAH;AACH,uBAHD,MAGO;AACH,4BAAI,KAAI,CAACnB,gBAAL,CAAsBoB,gBAA1B,EAA4C;AACxC,0BAAA,KAAI,CAACpB,gBAAL,CAAsBoB,gBAAtB;AACH;;AACDJ,wBAAAA,GAAG;AACN;AACJ,qBAVD;AAWH,mBAZM,CAAP;AAaH,iBAfE,CAAP;AAiBH,eAlBM,CAjCX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K","sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport { LokiDatabaseSettings } from '../../types';\nimport { now, promiseWait, requestIdlePromise } from '../../util';\n\n/**\n * The autosave feature of lokijs has strange behaviors\n * and often runs a save in critical moments when other\n * more important tasks are running.\n * So instead we use a custom save queue that ensures we\n * only run loki.saveDatabase() when nothing else is running.\n */\nexport class LokiSaveQueue {\n    public writesSinceLastRun: number = 0;\n    public readonly runningSavesIdleQueue: IdleQueue = new IdleQueue(1);\n\n    constructor(\n        public readonly lokiDatabase: Loki,\n        public readonly databaseSettings: LokiDatabaseSettings,\n        public readonly rxDatabaseIdleQueue: IdleQueue\n    ) {\n\n    }\n\n    public addWrite() {\n        this.writesSinceLastRun = this.writesSinceLastRun + 1;\n        this.run();\n    }\n\n    public async run() {\n        if (!this.databaseSettings.adapter) {\n            return;\n        }\n        const t = now();\n        if (this.writesSinceLastRun === 0) {\n            return this.runningSavesIdleQueue.requestIdlePromise();\n        }\n\n        await Promise.all([\n            requestIdlePromise(),\n            promiseWait(100)\n        ]);\n        while (\n            (\n                !this.rxDatabaseIdleQueue.isIdle() ||\n                !this.runningSavesIdleQueue.isIdle()\n            ) && this.writesSinceLastRun !== 0\n        ) {\n            await requestIdlePromise();\n            await Promise.all([\n                this.rxDatabaseIdleQueue.requestIdlePromise(),\n                this.runningSavesIdleQueue.requestIdlePromise(),\n                promiseWait(100)\n            ]);\n        }\n\n        if (this.writesSinceLastRun === 0) {\n            return;\n        }\n        const writeAmount = this.writesSinceLastRun;\n        this.writesSinceLastRun = 0;\n\n        return this.runningSavesIdleQueue.requestIdlePromise().then(() => {\n            return this.runningSavesIdleQueue.wrapCall(\n                () => {\n                    return new Promise<void>((res, rej) => {\n                        this.lokiDatabase.saveDatabase(err => {\n                            if (err) {\n                                this.writesSinceLastRun = this.writesSinceLastRun + writeAmount;\n                                rej(err);\n                            } else {\n                                if (this.databaseSettings.autosaveCallback) {\n                                    this.databaseSettings.autosaveCallback();\n                                }\n                                res();\n                            }\n                        });\n                    })\n                }\n            );\n        })\n    }\n}\n"],"file":"loki-save-queue.js"}