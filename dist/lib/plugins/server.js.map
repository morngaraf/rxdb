{"version":3,"sources":["../../../src/plugins/server.ts"],"names":["RxDBReplicationCouchDBPlugin","PouchAdapterHttp","ExpressPouchDB","require","error","console","PouchdbAllDbs","PouchDB","APP_OF_DB","WeakMap","SERVERS_OF_DB","DBS_WITH_SERVER","WeakSet","normalizeDbName","db","splitted","name","split","filter","str","pop","getPrefix","length","ret","join","startsWith","tunnelCollectionPath","path","app","colName","pathWithSlash","endsWith","collectionPath","use","req","res","next","baseUrl","Promise","res1","setTimeout","to","schema","version","toFull","originalUrl","replace","spawnServer","port","cors","startServer","pouchdbExpressOptions","collectionsPath","has","set","storage","adapter","Error","adapterObj","pouchDBOptions","Object","assign","prefix","log","pseudo","defaults","keys","collections","forEach","add","origin","callback","originToSend","usePouchExpressOptions","inMemoryConfig","logPath","nodePath","os","tmpdir","pouchApp","server","startupPromise","PROMISE_RESOLVE_VOID","rej","answered","listen","on","err","get","push","all","values","map","collection","url","pingDb","info","close","response","ensureNoMoreCollections","args","database","onDestroy","RxDBServerPlugin","rxdb","prototypes","RxDatabase","proto","overwritable","hooks","preDestroyRxDatabase","preCreateRxCollection"],"mappings":"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","sourcesContent":["import * as os from 'os';\nimport * as nodePath from 'path';\n\nimport express from 'express';\nimport type { Express } from 'express';\nimport corsFn from 'cors';\n\nimport {\n    addPouchPlugin,\n    PouchDB,\n    RxStoragePouch\n} from '../plugins/pouchdb';\nimport {\n    newRxError\n} from '../rx-error';\nimport type {\n    PouchDBExpressServerOptions,\n    RxDatabase,\n    RxPlugin,\n    ServerResponse\n} from '../types';\n\nimport {\n    adapterObject,\n    addRxPlugin,\n    flatClone,\n    PROMISE_RESOLVE_VOID\n} from '../core';\nimport { RxDBReplicationCouchDBPlugin } from './replication-couchdb';\naddRxPlugin(RxDBReplicationCouchDBPlugin);\n\nimport PouchAdapterHttp from 'pouchdb-adapter-http';\naddPouchPlugin(PouchAdapterHttp);\n\nlet ExpressPouchDB: any;\ntry {\n    ExpressPouchDB = require('express-pouchdb');\n} catch (error) {\n    console.error(\n        'Since version 8.4.0 the module \\'express-pouchdb\\' is not longer delivered with RxDB.\\n' +\n        'You can install it with \\'npm install express-pouchdb\\''\n    );\n}\n\n// we have to clean up after tests so there is no stupid logging\n// @link https://github.com/pouchdb/pouchdb-server/issues/226\nconst PouchdbAllDbs = require('pouchdb-all-dbs');\nPouchdbAllDbs(PouchDB);\n\nconst APP_OF_DB: WeakMap<RxDatabase, Express> = new WeakMap();\nconst SERVERS_OF_DB = new WeakMap();\nconst DBS_WITH_SERVER = new WeakSet();\n\n\nconst normalizeDbName = function (db: RxDatabase) {\n    const splitted = db.name.split('/').filter((str: string) => str !== '');\n    return splitted.pop();\n};\n\nconst getPrefix = function (db: RxDatabase) {\n    const splitted = db.name.split('/').filter((str: string) => str !== '');\n    splitted.pop(); // last was the name\n    if (splitted.length === 0) {\n        return '';\n    }\n    let ret = splitted.join('/') + '/';\n    if (db.name.startsWith('/')) {\n        ret = '/' + ret;\n    }\n    return ret;\n};\n\n/**\n * tunnel requests so collection-names can be used as paths\n */\nfunction tunnelCollectionPath(\n    db: RxDatabase,\n    path: string,\n    app: Express,\n    colName: string\n) {\n    const pathWithSlash = path.endsWith('/') ? path : path + '/';\n    const collectionPath = pathWithSlash + colName;\n    app.use(collectionPath, async function (req: any, res: any, next: any) {\n        if (req.baseUrl.endsWith(collectionPath)) {\n\n            while (!db[colName]) {\n                // if the collection is migrated,\n                // it can happen that it does not exist at this moment\n                await new Promise(res1 => setTimeout(res1, 50));\n            }\n            const to = normalizeDbName(db) + '-rxdb-' + db[colName].schema.version + '-' + colName;\n            const toFull = req.originalUrl.replace(collectionPath, pathWithSlash + to);\n            req.originalUrl = toFull;\n        }\n        next();\n    });\n}\n\nexport async function spawnServer(\n    this: RxDatabase,\n    {\n        path = '/db',\n        port = 3000,\n        cors = false,\n        startServer = true,\n        pouchdbExpressOptions = {}\n    }\n): Promise<ServerResponse> {\n    const db: RxDatabase = this;\n    const collectionsPath = startServer ? path : '/';\n    if (!SERVERS_OF_DB.has(db)) {\n        SERVERS_OF_DB.set(db, []);\n    }\n\n    const storage: RxStoragePouch = db.storage as any;\n    if (!storage.adapter) {\n        throw new Error('The RxDB server plugin only works with pouchdb storage.');\n    }\n\n    const adapterObj = adapterObject(storage.adapter);\n    const pouchDBOptions = Object.assign(\n        { prefix: getPrefix(db), log: false },\n        adapterObj,\n    );\n\n    const pseudo = PouchDB.defaults(pouchDBOptions);\n\n    const app = express();\n    APP_OF_DB.set(db, app);\n\n    Object.keys(db.collections).forEach(colName => {\n        // tunnel requests so collection-names can be used as paths\n        tunnelCollectionPath(db, collectionsPath, app, colName);\n    });\n\n\n\n    // remember to throw error if collection is created after the server is already there\n    DBS_WITH_SERVER.add(db);\n\n    if (cors) {\n        app.use(corsFn({\n            'origin': function (origin, callback) {\n                const originToSend: any = origin || '*';\n                callback(null, originToSend);\n            },\n            'credentials': true,\n            'methods': 'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT',\n        }));\n    }\n\n    /**\n     * Overwrite the defaults of PouchDBExpressServerOptions.\n     * In RxDB the defaults should not polute anything with folders so we store the config in memory\n     * and the logs in the tmp folder of the os.\n     */\n    const usePouchExpressOptions: PouchDBExpressServerOptions = flatClone(pouchdbExpressOptions);\n    if (typeof usePouchExpressOptions.inMemoryConfig === 'undefined') {\n        usePouchExpressOptions.inMemoryConfig = true;\n    }\n    if (typeof usePouchExpressOptions.logPath === 'undefined') {\n        usePouchExpressOptions.logPath = nodePath.join(\n            os.tmpdir(),\n            'rxdb-server-log.txt'\n        );\n    }\n\n    const pouchApp = ExpressPouchDB(pseudo, usePouchExpressOptions);\n    app.use(collectionsPath, pouchApp);\n\n    let server = null;\n    let startupPromise: Promise<void> = PROMISE_RESOLVE_VOID;\n    if (startServer) {\n        /**\n         * Listen for errors on server startup.\n         * and properly handle the error instead of returning a startupPromise\n         */\n        startupPromise = new Promise((res, rej) => {\n            let answered = false;\n            server = app.listen(port, () => {\n                if (!answered) {\n                    answered = true;\n                    res();\n                }\n            });\n            server.on('error', (err) => {\n                if (!answered) {\n                    answered = true;\n                    rej(err);\n                }\n            });\n        });\n        SERVERS_OF_DB.get(db).push(server);\n\n        /**\n         * When the database has no documents, there is no db file\n         * and so the replication would not work.\n         * This is a hack which ensures that the couchdb instance exists\n         * and we can replicate even if there is no document in the beginning.\n         */\n        Promise.all(\n            Object.values(db.collections).map(async (collection) => {\n                const url = 'http://localhost:' + port + collectionsPath + '/' + collection.name;\n                try {\n                    const pingDb = new PouchDB(url);\n                    await pingDb.info();\n                    await pingDb.close();\n                } catch (_err) { }\n            })\n        );\n    }\n\n\n    await startupPromise;\n    const response: ServerResponse = {\n        app,\n        pouchApp,\n        server\n    };\n    return response;\n}\n\n/**\n * when a server is created, no more collections can be spawned\n */\nfunction ensureNoMoreCollections(args: any) {\n    if (DBS_WITH_SERVER.has(args.database)) {\n        const err = newRxError(\n            'S1', {\n            collection: args.name,\n            database: args.database.name\n        }\n        );\n        throw err;\n    }\n}\n\n/**\n * runs when the database gets destroyed\n */\nexport function onDestroy(db: RxDatabase) {\n    if (SERVERS_OF_DB.has(db)) {\n        SERVERS_OF_DB.get(db).forEach((server: any) => server.close());\n    }\n}\n\nexport const RxDBServerPlugin: RxPlugin = {\n    name: 'server',\n    rxdb: true,\n    prototypes: {\n        RxDatabase: (proto: any) => {\n            proto.server = spawnServer;\n        }\n    },\n    overwritable: {},\n    hooks: {\n        preDestroyRxDatabase: onDestroy,\n        preCreateRxCollection: ensureNoMoreCollections\n    }\n};\n"],"file":"server.js"}